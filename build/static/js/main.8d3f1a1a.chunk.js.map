{"version":3,"sources":["components/addcard.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","str","formValid","formErrors","rest","valid","Object","values","forEach","val","length","AddCard","props","handleSubmit","e","preventDefault","state","jsonData","JSON","stringify","a","fetch","method","headers","body","rawResponse","json","result","success","onAddCard","cards","myFormRef","reset","console","log","message","handleChange","target","name","value","rules","test","number","limit","setState","luhn","validate","this","className","noValidate","onSubmit","ref","el","htmlFor","type","id","placeholder","onChange","PureComponent","defaultProps","PropTypes","func","isRequired","List","scope","map","item","key","balance","colSpan","App","useState","data","setData","useEffect","rawdata","response","list","fetchData","updatedList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d3f1a1a.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport luhn from 'luhn';\nimport PropTypes from 'prop-types';\n\n/**\n * Helper function to check empty strings.\n * @function isEmpty\n */\nconst isEmpty = (str) => (str === '' || str === null);\n\n/**\n * Validate form object for values and errors\n * @function formValid\n */\nconst formValid = ({ formErrors, ...rest }) => {\n    let valid = true;\n    // validate form errors being empty\n    Object.values(formErrors).forEach(val => { val.length > 0 && (valid = false) });\n    // validate the form was filled out\n    Object.values(rest).forEach(val => { val === null && (valid = false) });\n    return valid;\n};\n\n/**\n * Add credit card\n * @class AddCard\n */\nclass AddCard extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: null,\n            number: null,\n            limit: null,\n            formErrors: {\n                name: '',\n                number: '',\n                limit: ''\n            }\n        };\n\n        // validaiton rules\n        this.rules = {\n            name: /^([a-z]|[a-z]\\s{0,1}[a-z])+$/i,\n            number: luhn.validate,\n            limit: /^[0-9]+$/,\n        };\n    }\n\n    static defaultProps = {\n        onAddCard: PropTypes.func.isRequired  \n    };\n    \n    /**\n     * Add new card\n     * @function handleSubmit\n     */\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (formValid(this.state)) {\n            const jsonData = JSON.stringify(this.state);\n            /**\n             * POST request with new card details\n             * @funtion addItem\n             */\n            (async () => {\n                const rawResponse = await fetch('http://localhost:5000/api/add', {\n                    method: 'POST',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    body: jsonData // data\n                });\n\n                const result = await rawResponse.json();\n                \n                if (result.success) {\n                    this.props.onAddCard(result.cards);\n                    this.myFormRef.reset();\n                } else {\n                    console.log('error adding card details', result.message);\n                }\n\n            })();\n        }\n    }\n\n    /**\n     * Validate fields on change\n     * @function handleChange\n     */\n    handleChange = e => {\n        const { name, value } = e.target;\n        const { rules } = this;\n        let formErrors = this.state.formErrors;\n\n        switch (name) {\n            case 'name':\n                formErrors.name = !isEmpty(value) && rules.name.test(value) ? '' : 'Please enter valid name';\n                break;\n            case 'number':\n                formErrors.number = value.length >= 15 && value.length <= 19 && rules.number(value) ? '' : 'Please enter valid card number';\n                break;\n            case 'limit':\n                formErrors.limit = !isEmpty(value) && rules.limit.test(value) ? '' : 'Please enter valid limit';\n                break;\n            default:\n                break;\n        }\n\n        // update state\n        this.setState({\n            formErrors,\n            [name]: value\n        });\n    }\n\n    /**\n     * Render markup\n     */\n    render() {\n            const {\n                formErrors\n            } = this.state;\n            return (\n                <div className=\"row text-left\">\n                    <h4 className=\"col-12\"> Add Card</h4>\n                    <hr className=\"mb-4\" />\n                    <form\n                        className=\"col-8 my-4 text-left\"\n                        noValidate\n                        onSubmit={ this.handleSubmit }\n                        ref={(el) => this.myFormRef = el}\n                        >\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input type=\"text\" className={ `form-control input-name ${!isEmpty(formErrors.name) ? 'error' : '' }` } id=\"name\" name=\"name\" placeholder=\"Name\" onChange={ this.handleChange } />\n                            {\n                                !isEmpty(formErrors.name) && ( <span className=\"invalid-feeback name-error error\"> { formErrors.name } </span>)\n                            } \n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"number\">Card Number</label>\n                            <input type=\"text\" className={ `form-control input-number ${!isEmpty(formErrors.number) ? 'error' : '' }` } id=\"cardnumber\" name=\"number\" placeholder=\"Card number\" onChange={ this.handleChange } />\n                            {\n                                !isEmpty(formErrors.number) && ( <span className=\"invalid-feeback error\"> { formErrors.number } </span> ) \n                            }\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"limit\"> Limit</label>\n                            <input type=\"text\" className={ `form-control input-limit ${!isEmpty(formErrors.limit) ? 'error' : '' }` } id=\"limit\" name=\"limit\" placeholder=\"0000\" onChange={ this.handleChange } />\n                            {\n                                !isEmpty(formErrors.limit) && ( <span className=\"invalid-feeback error\"> { formErrors.limit } </span> ) \n                            }\n                        </div>\n                        <div className=\"row p-3\">\n                            <button type=\"submit\" className=\"btn btn-primary btn-md w-50\"> Add </button>\n                        </div>\n                    </form>\n                </ div>);\n        }\n};\n\nexport default AddCard;","import React, { Fragment } from 'react';\n\n/**\n * Render cards list\n * @function List\n */\nfunction List(props) {\n\n    /**\n     * Render JSX\n     */\n    return (\n        <Fragment>\n            <hr className=\"mb-4\" />\n            <h4 className=\"my-5\">Existing Cards</h4>\n            <div className=\"row\">\n                <table className=\"table cards-wrapper\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Card Number</th>\n                            <th scope=\"col\">Balance</th>\n                            <th scope=\"col\">Limit</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            \n                            props.cards ? (\n                                props.cards.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item.name}</td>\n                                            <td>{item.number}</td>\n                                            <td>&pound; {item.balance}</td>\n                                            <td>{item.limit}</td>\n                                        </tr>);\n                                })    \n                            )\n                            :\n                            (<tr><td colSpan=\"4\">No Records found.</td></tr>)\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </Fragment>);\n}\n\nexport default List;\n","import React, { useState, useEffect } from 'react';\n\nimport AddCard from './components/addcard';\nimport List from './components/list';\n\nimport './App.css';\n\n/**\n * App component\n * @function App\n */\nconst App = () => {\n  const [data, setData] = useState([]);\n    /**\n     * Hooks for fetching all card details details\n     */\n    useEffect(() => {\n        const fetchData = async () => {\n            const rawdata = await fetch('/api/list');\n            const response = await rawdata.json();\n\n            setData(response.list);\n        };\n        fetchData();\n    }, []);\n\n    /**\n     * Handle new card addition\n     * @function on AddCard\n     * @param {Array} updatedList array of data\n     */\n    const onAddCard = (updatedList) => {\n      setData(updatedList);\n    }\n  \n    /**\n     * Render markup\n     * @returns {HTMLObject|JSX}\n     */\n    return (\n      <div className=\"container bg-light App\">\n        <header className=\"row\">\n            <div className=\"col-12 py-5\">\n              <h1 className=\"my-3\">Credit Card System</h1>\n            </div>\n        </header>\n        <main className=\"container text-left\">\n            <AddCard onAddCard={onAddCard} />\n            <List cards={data} />\n        </main>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}